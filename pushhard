/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   push_swap.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ftrujill <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/06/09 11:51:02 by ftrujill          #+#    #+#             */
/*   Updated: 2019/06/10 17:28:33 by ftrujill         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "./libft/libft.h"
#include "push_swap.h"

int     can_move(t_stack *a, t_stack *b, int s_b)
{
    int x;

    x = s_b ? 1 : 0;
    if ((a->stack[0] > a->stack[a->size - 1] || a->stack[0] > b->stack[x]) &&
        (a->stack[1] > a->stack[a->size - 1] || a->stack[0] > b->stack[x]))
        return (1);
    if ((a->stack[0] > a->stack[a->size - 1] || a->stack[0] > b->stack[x]) &&
        !(a->stack[1] > a->stack[a->size - 1] || a->stack[0] > b->stack[x]))
        return (2);
    if (!(a->stack[0] > a->stack[a->size - 1] || a->stack[0] > b->stack[x]) &&
        (a->stack[1] > a->stack[a->size - 1] || a->stack[0] > b->stack[x]))
        return (3);
    return (0);
}

void    swapper(t_stack *s1, t_stack *s2, int *s_s1, int *s_s2)
{
    if (*s_s1)
    {
        if (*s_s2)
        {
            swap(s1) && swap(s2);
            *s_s2 = 0;
        }
        else
        {
            swap(s1);
            *s_s1 = 0;
        }
    }   
}

int     can_move2(t_stack *a, t_stack *b, int pos, int s_b)
{
    int x;

    x = s_b ? 1 : 0;
    if (a->stack[pos] > a->stack[a->size - 1] || a->stack[pos] > b->stack[x])
        return (1);
    return (0);
}

int    d_push(t_stack *s1, t_stack *s2)
{
    return (push(s1, s2) && push(s1, s2));
}

void    first_split(t_stack *a, t_stack *b, int argc)
{
    int s_a;
    int s_b;
    int c_m;
    int i;
    int t;

    t = 0;
    i = -1;
    while (++i < argc - 1 && a->stack[0] < a->stack[1]) 
        rotate(a);
    push(b, a);
    push(b, a);
    i = i + 2;
    while (i < argc - 1)
    {
        s_a = (a->stack[0] > a->stack[1]) ? 1 : 0;
        s_b = (b->stack[0] < b->stack[1]) ? 1 : 0;
        if (!s_a && (a->stack[0] > a->stack[a->size - 1]))
            {
                rotate(a);
                i++;
            }
        else if (!s_a)
        {
            s_b ? swap(b) : 0;
            if (a->stack[0] > b->stack[0])
                {
                    push(b, a);
                    i++;
                }
            else
            {
                t >= 0 ? push(b, a) && push(b, a) : 
                    rotate(a) && rotate(a);
                t = t >= 0 ? t - 1 : t + 1;
                i = i + 2;
            }
        }
        else if (s_a )
    }

void    init_towers(t_towers *twrs_a, t_towers *twrs_b)
{
    twrs_a->total = 1;
    twrs_b->total = 1;
    twrs_a->pos[0] = 0;
    twrs_b->pos[0] = 0;
}

int     main(int argc, char **argv)
{
    char        **inst;
    t_stack     *a;
    t_stack     *b;
    t_towers    *twrs_a;
    t_towers    *twrs_b;

    if (argc == 1)
        return (0);
    if (!check_stack(argc, argv)
        || !(inst = (char**)malloc(sizeof(char*)))
        || !(a = (t_stack*)malloc(sizeof(t_stack)))
        || !(b = (t_stack*)malloc(sizeof(t_stack)))
        || !(a->stack = (int*)malloc(sizeof(int) * argc))
        || !(b->stack = (int*)malloc(sizeof(int) * argc))
        || !(twrs_a = (t_towers*)malloc(sizeof(t_towers)))
        || !(twrs_b = (t_towers*)malloc(sizeof(t_towers)))
        || !(twrs_a->pos = (int*)malloc(sizeof(int) * argc))
        || !(twrs_b->pos = (int*)malloc(sizeof(int) * argc)))
        return(prt_error()); 
    init_stacks(argc, argv, a, b);
    init_towers(twrs_a, twrs_b);
    prt_stacks(a, b);
}